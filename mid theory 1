#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Member {
    char name[50];
    int dailySteps[30];
};

void analyzeStepData(struct Member members[], int n) {
    printf("\n--- Fitness Analysis Report ---\n\n");
    for (int i = 0; i < n; i++) {
        int exceededDays = 0;
        int maxSteps = 0;

        for (int j = 0; j < 30; j++) {
            if (members[i].dailySteps[j] > 10000) {
                exceededDays++;
            }
            if (members[i].dailySteps[j] > maxSteps) {
                maxSteps = members[i].dailySteps[j];
            }
        }

        printf("--- Analysis for %s ---\n", members[i].name);
        printf("Days with over 10,000 steps: %d\n", exceededDays);
        printf("Maximum step count in the month: %d\n\n", maxSteps);
    }
}

int main() {
    int numMembers;

    printf("How many members would you like to enter? ");
    scanf("%d", &numMembers);

    struct Member* members = (struct Member*)malloc(numMembers * sizeof(struct Member));
    if (members == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }

    for (int i = 0; i < numMembers; i++) {
        printf("\n--- Entering data for Member #%d ---\n", i + 1);
        printf("Enter member's name: ");
        scanf("%s", members[i].name);

        printf("Enter all 30 step counts for %s separated by commas:\n", members[i].name);

        // Read 30 integers separated by commas
        for (int j = 0; j < 30; j++) {
            if (j < 29) {
                scanf("%d,", &members[i].dailySteps[j]); // Read an integer followed by a comma
            } else {
                scanf("%d", &members[i].dailySteps[j]); // Read the last integer without a comma
            }
        }
    }

    analyzeStepData(members, numMembers);

    free(members);
    return 0;
}
/* // Sample main function with hardcoded data for testing
int main() {
    // Sample data for two members
    struct Member members[2] = {
        {
            "Anjana",
            {8500, 9200, 11000, 12500, 7800, 15000, 9500, 10100, 6000, 8900,
            13200, 11500, 9900, 10001, 8000, 16000, 7500, 9300, 10500, 11200,
            9100, 8800, 14000, 12800, 9600, 10300, 7200, 8500, 11800, 19500}
        },
        {
            "Baldev",
            {7000, 6500, 8000, 9500, 10500, 9800, 11200, 8300, 7900, 9200,
            6800, 7100, 8800, 9900, 10000, 9700, 12100, 8600, 7500, 9100,
            10800, 8200, 9300, 9600, 11500, 8900, 7700, 9400, 10200, 13000}
        }
    };
    
    // Call the analysis function
    analyzeStepData(members, 2);
    
    return 0;
}*/
