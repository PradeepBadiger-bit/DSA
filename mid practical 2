#include <stdio.h>
#include <string.h>

#define MAX_STACK_SIZE 10
#define OPERATION_MAX_LEN 20

typedef struct {
    char items[MAX_STACK_SIZE][OPERATION_MAX_LEN];
    int top;
} Stack;

// --- Core Stack Operations ---
void initStack(Stack* s) { s->top = -1; }
int isEmpty(Stack* s) { return s->top == -1; }
const char* peek(Stack* s) { return isEmpty(s) ? "none" : s->items[s->top]; }
void push(Stack* s, const char* op) {
    if (s->top >= MAX_STACK_SIZE - 1) {
        printf("-> ERROR: Stack is full.\n");
        return;
    }
    strcpy(s->items[++s->top], op);
}
const char* pop(Stack* s) {
    return isEmpty(s) ? NULL : s->items[s->top--];
}

// --- Main Functionalities ---
void performOperation(Stack* undo, Stack* redo, const char* op) {
    push(undo, op);
    if (!isEmpty(redo)) {
        redo->top = -1; // Clear redo stack
        printf("-> INFO: Redo history has been cleared.\n");
    }
    printf("-> SUCCESS: Performed operation \"%s\".\n", op);
}

void undo(Stack* undo, Stack* redo) {
    const char* op = pop(undo);
    if (!op) {
        printf("-> INFO: Nothing to undo.\n");
        return;
    }
    push(redo, op);
    printf("-> SUCCESS: Undone \"%s\". Next to undo: \"%s\"\n", op, peek(undo));
}

void redo(Stack* undo, Stack* redo) {
    const char* op = pop(redo);
    if (!op) {
        printf("-> INFO: Nothing to redo.\n");
        return;
    }
    push(undo, op);
    printf("-> SUCCESS: Redone \"%s\". Next to redo: \"%s\"\n", op, peek(redo));
}

// --- Display Logic ---
void printStack(const char* name, Stack* s) {
    printf("%-12s(Top ->): ", name);
    if (isEmpty(s)) {
        printf("(empty)\n");
    } else {
        for (int i = s->top; i >= 0; i--) printf("[%s] ", s->items[i]);
        printf("\n");
    }
}

// --- Main Program Loop ---
int main() {
    Stack undoStack, redoStack;
    initStack(&undoStack);
    initStack(&redoStack);
    int choice = 0, opCounter = 1;

    while (choice != 5) {
        printf("\n1. Perform | 2. Undo | 3. Redo | 4. View | 5. Exit\nChoice: ");
        if (scanf("%d", &choice) != 1) {
            printf("-> ERROR: Invalid input.\n");
            while (getchar() != '\n'); // Clear input buffer
            continue;
        }
        
        char newOp[OPERATION_MAX_LEN];
        switch (choice) {
            case 1:
                sprintf(newOp, "op%d", opCounter++);
                performOperation(&undoStack, &redoStack, newOp);
                break;
            case 2: undo(&undoStack, &redoStack); break;
            case 3: redo(&undoStack, &redoStack); break;
            case 4:
                printStack("Undo Stack", &undoStack);
                printStack("Redo Stack", &redoStack);
                break;
            case 5: printf("Exiting program. Goodbye!\n"); break;
            default: printf("-> ERROR: Invalid choice.\n"); break;
        }
    }
    return 0;
}
