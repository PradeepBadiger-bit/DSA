#include <stdio.h>
#include <stdlib.h>

// Node structure for the singly linked list
typedef struct Node {
    int songId;
    struct Node* next;
} Node;

// Function to print the linked list
void printPlaylist(Node* head) {
    while (head) {
        printf("%d%s", head->songId, head->next ? " -> " : "");
        head = head->next;
    }
    printf("\n");
}

void reversePlaylistSegment(Node** head_ref, int m, int n) {
    if (!*head_ref || m >= n) return;

    // A dummy node simplifies edge cases like m=1
    Node dummy = {0, *head_ref};
    Node* node_before_m = &dummy;

    // 1. Find the node right before the reversal segment
    for (int i = 1; i < m; i++) {
        node_before_m = node_before_m->next;
    }

    // 2. Standard list reversal for the segment
    Node* node_m = node_before_m->next;
    Node* prev = NULL;
    Node* current = node_m;
    for (int i = 0; i <= n - m; i++) {
        Node* next_temp = current->next;
        current->next = prev;
        prev = current;
        current = next_temp;
    }

    // 3. Reconnect the reversed segment
    node_before_m->next = prev;
    node_m->next = current;
    *head_ref = dummy.next;
}

int main() {
    int numSongs = 0, m = 0, n = 0;
    Node *head = NULL, *tail = NULL;

    printf("How many songs are in the playlist? ");
    scanf("%d", &numSongs);

    if (numSongs > 0) {
        printf("Enter the %d song IDs:\n", numSongs);
        for (int i = 0; i < numSongs; i++) {
            int id;
            scanf("%d", &id);
            Node* newNode = malloc(sizeof(Node));
            newNode->songId = id;
            newNode->next = NULL;

            if (head == NULL) {
                head = tail = newNode;
            } else {
                tail = tail->next = newNode;
            }
        }
    }

    printf("\nEnter starting (m) and ending (n) positions for reversal: ");
    scanf("%d %d", &m, &n);

    printf("\nOriginal Playlist: ");
    printPlaylist(head);

    reversePlaylistSegment(&head, m, n);
    
    printf("Modified Playlist: ");
    printPlaylist(head);

    // Free allocated memory
    while (head) {
        Node* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}
